Tools in Data Science
Tools in Data Science
1. Development Tools
Editor: VS Code
AI Code Editors: GitHub Copilot
Python tools: uv
JavaScript tools: npx
Unicode
Browser: DevTools
CSS Selectors
JSON
Terminal: Bash
AI Terminal Tools: llm
LLM CLI: llm
Spreadsheet: Excel, Google Sheets
Database: SQLite
Version Control: Git, GitHub
2. Deployment Tools
Markdown
Images: Compression
Static hosting: GitHub Pages
Notebooks: Google Colab
Serverless hosting: Vercel
CI/CD: GitHub Actions
Containers: Docker, Podman
DevContainers: GitHub Codespaces
Tunneling: ngrok
CORS
REST APIs
Web Framework: FastAPI
Authentication: Google Auth
Local LLMs: Ollama
3. Large Language Models
Prompt engineering
TDS TA Instructions
TDS GPT Reviewer
LLM Sentiment Analysis
LLM Text Extraction
Base 64 Encoding
Vision Models
Embeddings
Multimodal Embeddings
Topic modeling
Vector databases
RAG with the CLI)
Hybrid RAG with TypeSense
Function Calling
LLM Agents
LLM Image Generation
LLM Speech
LLM Evals
Project 1
4. Data Sourcing
Scraping with Excel
Scraping with Google Sheets
Crawling with the CLI
BBC Weather API with Python
Scraping IMDb with JavaScript
Nominatim API with Python
Wikipedia Data with Python
Scraping PDFs with Tabula
Convert PDFs to Markdown
Convert HTML to Markdown
LLM Website Scraping
LLM Video Screen-Scraping
Web Automation with Playwright
Scheduled Scraping with GitHub Actions
Scraping emarketer.com
Scraping: Live Sessions
5. Data Preparation
Data Cleansing in Excel
Data Transformation in Excel
Splitting Text in Excel
Data Aggregation in Excel
Data Preparation in the Shell
Data Preparation in the Editor
Data Preparation in DuckDB
Cleaning Data with OpenRefine
Parsing JSON
Data Transformation with dbt
Transforming Images
Extracting Audio and Transcripts
6. Data Analysis
Correlation with Excel
Regression with Excel
Forecasting with Excel
Outlier Detection with Excel
Data Analysis with Python
Data Analysis with SQL
Data Analysis with Datasette
Data Analysis with DuckDB
Data Analysis with ChatGPT
Geospatial Analysis with Excel
Geospatial Analysis with Python
Geospatial Analysis with QGIS
Network Analysis in Python
Project 2
7. Data Visualization
Visualizing Forecasts with Excel
Visualizing Animated Data with PowerPoint
Visualizing Animated Data with Flourish
Visualizing Network Data with Kumu
Visualizing Charts with Excel
Data Visualization with Seaborn
Data Visualization with ChatGPT
Actor Network Visualization
RAWgraphs
Data Storytelling
Narratives with LLMs
Interactive Notebooks: Marimo
HTML Slides: RevealJS
Markdown Presentations: Marp
LLM CLI: llm
llm
is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.
Basic Usage
Install llm
. Then set up your
OPENAI_API_KEY
environment variable. See
Getting started
.
TDS Students
: See
Large Language Models
for instructions on how to get and use
OPENAI_API_KEY
.
# Run a simple prompt
llm
'five great names for a pet pelican'
# Continue a conversation
llm
-c
'now do walruses'
# Start a memory-aware chat session
llm chat
# Specify a model
llm
-m
gpt-4.1-nano
'Summarize tomorrow’s meeting agenda'
# Extract JSON output
llm
'List the top 5 Python viz libraries with descriptions'
\
--schema-multi
'name,description'
Copy to clipboard
Error
Copied
Or use llm without installation using
uvx
:
# Run llm via uvx without any prior installation
uvx llm
'Translate "Hello, world" into Japanese'
# Specify a model
uvx llm
-m
gpt-4.1-nano
'Draft a 200-word blog post on data ethics'
# Use structured JSON output
uvx llm
'List the top 5 programming languages in 2025 with their release years'
\
--schema-multi
'rank,language,release_year'
Copy to clipboard
Error
Copied
Key Features
Interactive prompts
:
llm '…'
— Fast shell access to any LLM.
Conversational flow
:
-c '…'
— Continue context across prompts.
Model switching
:
-m MODEL
— Use OpenAI, Anthropic, local models, and more.
Structured output
:
llm json
— Produce JSON for automation.
Logging & history
:
llm logs path
— Persist every prompt/response in SQLite.
Web UI
:
datasette "$(llm logs path)"
— Browse your entire history with Datasette.
Persistent chat
:
llm chat
— Keep the model in memory across multiple interactions.
Plugin ecosystem
:
llm install PLUGIN
— Add support for new models, data sources, or workflows. (
Language models on the command-line - Simon Willison’s Weblog
)
Practical Uses
Automated coding
. Generate code scaffolding, review helpers, or utilities on demand. For example, after running
llm install llm-cmd
, run
llm cmd 'Undo the last git commit'
. Inspired by
Simon’s post on using LLMs for rapid tool building
.
Transcript processing
. Summarize YouTube or podcast transcripts using Gemini. See
Putting Gemini 2.5 Pro through its paces
.
Commit messages
. Turn diffs into descriptive commit messages, e.g.
git diff | llm 'Write a concise git commit message explaining these changes'
. \
Data extraction
. Convert free-text into structured JSON for automation.
Structured data extraction from unstructured content using LLM schemas
.
Previous
Terminal: Bash
Next
Spreadsheet: Excel, Google Sheets