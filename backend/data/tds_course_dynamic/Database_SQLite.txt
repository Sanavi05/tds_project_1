Tools in Data Science
Tools in Data Science
1. Development Tools
Editor: VS Code
AI Code Editors: GitHub Copilot
Python tools: uv
JavaScript tools: npx
Unicode
Browser: DevTools
CSS Selectors
JSON
Terminal: Bash
AI Terminal Tools: llm
Spreadsheet: Excel, Google Sheets
Database: SQLite
Database: SQLite
Version Control: Git, GitHub
2. Deployment Tools
Markdown
Images: Compression
Static hosting: GitHub Pages
Notebooks: Google Colab
Serverless hosting: Vercel
CI/CD: GitHub Actions
Containers: Docker, Podman
DevContainers: GitHub Codespaces
Tunneling: ngrok
CORS
REST APIs
Web Framework: FastAPI
Authentication: Google Auth
Local LLMs: Ollama
3. Large Language Models
Prompt engineering
TDS TA Instructions
TDS GPT Reviewer
LLM Sentiment Analysis
LLM Text Extraction
Base 64 Encoding
Vision Models
Embeddings
Multimodal Embeddings
Topic modeling
Vector databases
RAG with the CLI)
Hybrid RAG with TypeSense
Function Calling
LLM Agents
LLM Image Generation
LLM Speech
LLM Evals
Project 1
4. Data Sourcing
Scraping with Excel
Scraping with Google Sheets
Crawling with the CLI
BBC Weather API with Python
Scraping IMDb with JavaScript
Nominatim API with Python
Wikipedia Data with Python
Scraping PDFs with Tabula
Convert PDFs to Markdown
Convert HTML to Markdown
LLM Website Scraping
LLM Video Screen-Scraping
Web Automation with Playwright
Scheduled Scraping with GitHub Actions
Scraping emarketer.com
Scraping: Live Sessions
5. Data Preparation
Data Cleansing in Excel
Data Transformation in Excel
Splitting Text in Excel
Data Aggregation in Excel
Data Preparation in the Shell
Data Preparation in the Editor
Data Preparation in DuckDB
Cleaning Data with OpenRefine
Parsing JSON
Data Transformation with dbt
Transforming Images
Extracting Audio and Transcripts
6. Data Analysis
Correlation with Excel
Regression with Excel
Forecasting with Excel
Outlier Detection with Excel
Data Analysis with Python
Data Analysis with SQL
Data Analysis with Datasette
Data Analysis with DuckDB
Data Analysis with ChatGPT
Geospatial Analysis with Excel
Geospatial Analysis with Python
Geospatial Analysis with QGIS
Network Analysis in Python
Project 2
7. Data Visualization
Visualizing Forecasts with Excel
Visualizing Animated Data with PowerPoint
Visualizing Animated Data with Flourish
Visualizing Network Data with Kumu
Visualizing Charts with Excel
Data Visualization with Seaborn
Data Visualization with ChatGPT
Actor Network Visualization
RAWgraphs
Data Storytelling
Narratives with LLMs
Interactive Notebooks: Marimo
HTML Slides: RevealJS
Markdown Presentations: Marp
Database: SQLite
Relational databases are used to store data in a structured way. You’ll often access databases created by others for analysis.
PostgreSQL, MySQL, MS SQL, Oracle, etc. are popular databases. But the most installed database is
SQLite
. It’s embedded into many devices and apps (e.g. your phone, browser, etc.). It’s lightweight but very scalable and powerful.
Watch these introductory videos to understand SQLite and how it’s used in Python (34 min):
There are many non-relational databases (NoSQL) like
ElasticSearch
,
MongoDB
,
Redis
, etc. that you should know about and we may cover later.
Core Concepts:
-- Create a table
CREATE
TABLE
users
(
id
INTEGER
PRIMARY
KEY
,
name
TEXT
NOT
NULL
,
email
TEXT
UNIQUE
,
created_at
DATETIME
DEFAULT
CURRENT_TIMESTAMP
)
;
-- Insert data
INSERT
INTO
users
(
name
,
email
)
VALUES
(
'Alice'
,
'alice@example.com'
)
,
(
'Bob'
,
'bob@example.com'
)
;
-- Query data
SELECT
name
,
COUNT
(
*
)
as
count
FROM
users
GROUP
BY
name
HAVING
count
>
1
;
-- Join tables
SELECT
u
.
name
,
o
.
product
FROM
users u
LEFT
JOIN
orders o
ON
u
.
id
=
o
.
user_id
WHERE
o
.
status
=
'pending'
;
Copy to clipboard
Error
Copied
Python Integration:
import
sqlite3
from
pathlib
import
Path
import
pandas
as
pd
async
def
query_database
(
db_path
:
Path
,
query
:
str
)
-
>
pd
.
DataFrame
:
"""Execute SQL query and return results as DataFrame.

    Args:
        db_path: Path to SQLite database
        query: SQL query to execute

    Returns:
        DataFrame with query results
    """
try
:
conn
=
sqlite3
.
connect
(
db_path
)
return
pd
.
read_sql_query
(
query
,
conn
)
finally
:
conn
.
close
(
)
# Example usage
db
=
Path
(
'data.db'
)
df
=
await
query_database
(
db
,
'''
    SELECT date, COUNT(*) as count
    FROM events
    GROUP BY date
'''
)
Copy to clipboard
Error
Copied
Common Operations:
Database Management
-- Backup database
.
backup
'backup.db'
-- Import CSV
.
mode
csv
.
import
data
.
csv table_name
-- Export results
.
headers
on
.
mode
csv
.
output results
.
csv
SELECT
*
FROM
table
;
Copy to clipboard
Error
Copied
Performance Optimization
-- Create index
CREATE
INDEX
idx_user_email
ON
users
(
email
)
;
-- Analyze query
EXPLAIN
QUERY
PLAN
SELECT
*
FROM
users
WHERE
email
LIKE
'%@example.com'
;
-- Show indexes
SELECT
*
FROM
sqlite_master
WHERE
type
=
'index'
;
Copy to clipboard
Error
Copied
Data Analysis
-- Time series aggregation
SELECT
date
(
timestamp
)
,
COUNT
(
*
)
as
events
,
AVG
(
duration
)
as
avg_duration
FROM
events
GROUP
BY
date
(
timestamp
)
;
-- Window functions
SELECT
*
,
AVG
(
amount
)
OVER
(
PARTITION
BY
user_id
ORDER
BY
date
ROWS
BETWEEN
3
PRECEDING
AND
CURRENT
ROW
)
as
moving_avg
FROM
transactions
;
Copy to clipboard
Error
Copied
Tools to work with SQLite:
SQLiteStudio
: Lightweight GUI
DBeaver
: Full-featured GUI
sqlite-utils
: CLI tool
Datasette
: Web interface
Previous
Spreadsheet: Excel, Google Sheets
Next
Version Control: Git, GitHub