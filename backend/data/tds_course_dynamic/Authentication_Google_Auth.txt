Tools in Data Science
Tools in Data Science
1. Development Tools
Editor: VS Code
AI Code Editors: GitHub Copilot
Python tools: uv
JavaScript tools: npx
Unicode
Browser: DevTools
CSS Selectors
JSON
Terminal: Bash
AI Terminal Tools: llm
Spreadsheet: Excel, Google Sheets
Database: SQLite
Version Control: Git, GitHub
2. Deployment Tools
Markdown
Images: Compression
Static hosting: GitHub Pages
Notebooks: Google Colab
Serverless hosting: Vercel
CI/CD: GitHub Actions
Containers: Docker, Podman
DevContainers: GitHub Codespaces
Tunneling: ngrok
CORS
REST APIs
Web Framework: FastAPI
Authentication: Google Auth
Google Authentication with FastAPI
Local LLMs: Ollama
3. Large Language Models
Prompt engineering
TDS TA Instructions
TDS GPT Reviewer
LLM Sentiment Analysis
LLM Text Extraction
Base 64 Encoding
Vision Models
Embeddings
Multimodal Embeddings
Topic modeling
Vector databases
RAG with the CLI)
Hybrid RAG with TypeSense
Function Calling
LLM Agents
LLM Image Generation
LLM Speech
LLM Evals
Project 1
4. Data Sourcing
Scraping with Excel
Scraping with Google Sheets
Crawling with the CLI
BBC Weather API with Python
Scraping IMDb with JavaScript
Nominatim API with Python
Wikipedia Data with Python
Scraping PDFs with Tabula
Convert PDFs to Markdown
Convert HTML to Markdown
LLM Website Scraping
LLM Video Screen-Scraping
Web Automation with Playwright
Scheduled Scraping with GitHub Actions
Scraping emarketer.com
Scraping: Live Sessions
5. Data Preparation
Data Cleansing in Excel
Data Transformation in Excel
Splitting Text in Excel
Data Aggregation in Excel
Data Preparation in the Shell
Data Preparation in the Editor
Data Preparation in DuckDB
Cleaning Data with OpenRefine
Parsing JSON
Data Transformation with dbt
Transforming Images
Extracting Audio and Transcripts
6. Data Analysis
Correlation with Excel
Regression with Excel
Forecasting with Excel
Outlier Detection with Excel
Data Analysis with Python
Data Analysis with SQL
Data Analysis with Datasette
Data Analysis with DuckDB
Data Analysis with ChatGPT
Geospatial Analysis with Excel
Geospatial Analysis with Python
Geospatial Analysis with QGIS
Network Analysis in Python
Project 2
7. Data Visualization
Visualizing Forecasts with Excel
Visualizing Animated Data with PowerPoint
Visualizing Animated Data with Flourish
Visualizing Network Data with Kumu
Visualizing Charts with Excel
Data Visualization with Seaborn
Data Visualization with ChatGPT
Actor Network Visualization
RAWgraphs
Data Storytelling
Narratives with LLMs
Interactive Notebooks: Marimo
HTML Slides: RevealJS
Markdown Presentations: Marp
Google Authentication with FastAPI
Secure your API endpoints using Google ID tokens to restrict access to specific email addresses.
Google Auth is the most commonly implemented single sign-on mechanism because:
It’s popular and user-friendly. Users can log in with their existing Google accounts.
It’s secure: Google supports OAuth2 and OpenID Connect to handle authentication.
Here’s how you build a FastAPI app that identifies the user.
Go to the
Google Cloud Console – Credentials
and click
Create Credentials > OAuth client ID
.
Choose
Web application
, set your authorized redirect URIs (e.g.,
http://localhost:8000/
).
Copy the
Client ID
and
Client Secret
into a
.env
file:
GOOGLE_CLIENT_ID=your-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-client-secret
Copy to clipboard
Error
Copied
Create your FastAPI
app.py
:
# /// script
# dependencies = ["python-dotenv", "fastapi", "uvicorn", "itsdangerous", "httpx", "authlib"]
# ///
import
os
from
dotenv
import
load_dotenv
from
fastapi
import
FastAPI
,
Request
from
fastapi
.
responses
import
RedirectResponse
from
starlette
.
middleware
.
sessions
import
SessionMiddleware
from
authlib
.
integrations
.
starlette_client
import
OAuth

load_dotenv
(
)
app
=
FastAPI
(
)
app
.
add_middleware
(
SessionMiddleware
,
secret_key
=
"create-a-random-secret-key"
)
oauth
=
OAuth
(
)
oauth
.
register
(
name
=
"google"
,
client_id
=
os
.
getenv
(
"GOOGLE_CLIENT_ID"
)
,
client_secret
=
os
.
getenv
(
"GOOGLE_CLIENT_SECRET"
)
,
server_metadata_url
=
"https://accounts.google.com/.well-known/openid-configuration"
,
client_kwargs
=
{
"scope"
:
"openid email profile"
}
,
)
@app
.
get
(
"/"
)
async
def
application
(
request
:
Request
)
:
user
=
request
.
session
.
get
(
"user"
)
# 3. For authenticated users: say hello
if
user
:
return
f"Hello
{
user
[
'email'
]
}
"
# 2. For users who have just logged in, save their details in the session
if
"code"
in
request
.
query_params
:
token
=
await
oauth
.
google
.
authorize_access_token
(
request
)
request
.
session
[
"user"
]
=
token
[
"userinfo"
]
return
RedirectResponse
(
"/"
)
# 1. For users who are logging in for the first time, redirect to Google login
return
await
oauth
.
google
.
authorize_redirect
(
request
,
request
.
url
)
if
__name__
==
"__main__"
:
import
uvicorn
    uvicorn
.
run
(
app
,
port
=
8000
)
Copy to clipboard
Error
Copied
Now, run
uv run app.py
.
When you visit
http://localhost:8000/
you’ll be redirected to a Google login page.
When you log in, you’ll be redirected back to
http://localhost:8000/
Now you’ll see the email ID you logged in with.
Instead of displaying the email, you can show different content based on the user. For example:
Allow access to specfic users and not others
Fetch the user’s personalized information
Display different content based on the user
Previous
Web Framework: FastAPI
Next
Local LLMs: Ollama