Tools in Data Science
Tools in Data Science
1. Development Tools
Editor: VS Code
AI Code Editors: GitHub Copilot
Python tools: uv
JavaScript tools: npx
Unicode
Browser: DevTools
CSS Selectors
JSON
Terminal: Bash
AI Terminal Tools: llm
Spreadsheet: Excel, Google Sheets
Database: SQLite
Version Control: Git, GitHub
2. Deployment Tools
Markdown
Images: Compression
Static hosting: GitHub Pages
Notebooks: Google Colab
Serverless hosting: Vercel
Serverless hosting: Vercel
CI/CD: GitHub Actions
Containers: Docker, Podman
DevContainers: GitHub Codespaces
Tunneling: ngrok
CORS
REST APIs
Web Framework: FastAPI
Authentication: Google Auth
Local LLMs: Ollama
3. Large Language Models
Prompt engineering
TDS TA Instructions
TDS GPT Reviewer
LLM Sentiment Analysis
LLM Text Extraction
Base 64 Encoding
Vision Models
Embeddings
Multimodal Embeddings
Topic modeling
Vector databases
RAG with the CLI)
Hybrid RAG with TypeSense
Function Calling
LLM Agents
LLM Image Generation
LLM Speech
LLM Evals
Project 1
4. Data Sourcing
Scraping with Excel
Scraping with Google Sheets
Crawling with the CLI
BBC Weather API with Python
Scraping IMDb with JavaScript
Nominatim API with Python
Wikipedia Data with Python
Scraping PDFs with Tabula
Convert PDFs to Markdown
Convert HTML to Markdown
LLM Website Scraping
LLM Video Screen-Scraping
Web Automation with Playwright
Scheduled Scraping with GitHub Actions
Scraping emarketer.com
Scraping: Live Sessions
5. Data Preparation
Data Cleansing in Excel
Data Transformation in Excel
Splitting Text in Excel
Data Aggregation in Excel
Data Preparation in the Shell
Data Preparation in the Editor
Data Preparation in DuckDB
Cleaning Data with OpenRefine
Parsing JSON
Data Transformation with dbt
Transforming Images
Extracting Audio and Transcripts
6. Data Analysis
Correlation with Excel
Regression with Excel
Forecasting with Excel
Outlier Detection with Excel
Data Analysis with Python
Data Analysis with SQL
Data Analysis with Datasette
Data Analysis with DuckDB
Data Analysis with ChatGPT
Geospatial Analysis with Excel
Geospatial Analysis with Python
Geospatial Analysis with QGIS
Network Analysis in Python
Project 2
7. Data Visualization
Visualizing Forecasts with Excel
Visualizing Animated Data with PowerPoint
Visualizing Animated Data with Flourish
Visualizing Network Data with Kumu
Visualizing Charts with Excel
Data Visualization with Seaborn
Data Visualization with ChatGPT
Actor Network Visualization
RAWgraphs
Data Storytelling
Narratives with LLMs
Interactive Notebooks: Marimo
HTML Slides: RevealJS
Markdown Presentations: Marp
Serverless hosting: Vercel
Serverless platforms let you rent a single function instead of an entire machine. They’re perfect for small web tools that
don’t need to run all the time
. Here are some common real-life uses:
A contact form that emails you when someone wants to hire you (runs for 2-3 seconds, a few times per day)
A tool that converts uploaded photos to black and white (runs for 5-10 seconds when someone uploads a photo)
A chatbot that answers basic questions about your business hours (runs for 1-2 seconds per question)
A newsletter sign-up that adds emails to your mailing list (runs for 1 second per sign-up)
A webhook that posts your Etsy sales to Discord (runs for 1 second whenever you make a sale)
You only pay when someone uses your tool, and the platform automatically handles busy periods. For example, if 100 people fill out your contact form at once, the platform creates 100 temporary copies of your code to handle them all. When they’re done, these copies disappear. It’s cheaper than running a full-time server because you’re not paying for the time when no one is using your tool - most tools are idle 95% of the time!
Rather than writing a full program, serverless platforms let you write functions. These functions are called via HTTP requests. They run in a cloud environment and are scaled up and down automatically. But this means you write programs in a different style. For example:
You can’t
pip install
packages - you have to use
requirements.txt
You can’t read or write files from the file system - you can only use APIs.
You can’t run commands (e.g.
subprocess.run()
)
Vercel
is a cloud platform optimized for frontend frameworks and serverless functions. Vercel is tightly integrated with GitHub. Pushing to your repository automatically triggers new deployments.
Here’s a
quickstart
.
Sign-up with Vercel
. Create an empty
git
repo with this
api/index.py
file.
To deploy a FastAPI app, add a
requirements.txt
file with
fastapi
as a dependency.
fastapi
Copy to clipboard
Error
Copied
Add your FastAPI code to a file, e.g.
main.py
.
# main.py
from
fastapi
import
FastAPI

app
=
FastAPI
(
)
@app
.
get
(
"/"
)
def
read_root
(
)
:
return
{
"message"
:
"Hello, World!"
}
Copy to clipboard
Error
Copied
Add a
vercel.json
file to the root of your repository.
{
"builds"
:
[
{
"src"
:
"main.py"
,
"use"
:
"@vercel/python"
}
]
,
"routes"
:
[
{
"src"
:
"/(.*)"
,
"dest"
:
"main.py"
}
]
}
Copy to clipboard
Error
Copied
On the command line, run:
npx vercel
to deploy a test version
npx vercel --prod
to deploy to production
Environment Variables
. Use
npx vercel env add
to add environment variables. In your code, use
os.environ.get('SECRET_KEY')
to access them.
Videos
Previous
Notebooks: Google Colab
Next
CI/CD: GitHub Actions