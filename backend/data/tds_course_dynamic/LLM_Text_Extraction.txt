Tools in Data Science
Tools in Data Science
1. Development Tools
Editor: VS Code
AI Code Editors: GitHub Copilot
Python tools: uv
JavaScript tools: npx
Unicode
Browser: DevTools
CSS Selectors
JSON
Terminal: Bash
AI Terminal Tools: llm
Spreadsheet: Excel, Google Sheets
Database: SQLite
Version Control: Git, GitHub
2. Deployment Tools
Markdown
Images: Compression
Static hosting: GitHub Pages
Notebooks: Google Colab
Serverless hosting: Vercel
CI/CD: GitHub Actions
Containers: Docker, Podman
DevContainers: GitHub Codespaces
Tunneling: ngrok
CORS
REST APIs
Web Framework: FastAPI
Authentication: Google Auth
Local LLMs: Ollama
3. Large Language Models
Prompt engineering
TDS TA Instructions
TDS GPT Reviewer
LLM Sentiment Analysis
LLM Text Extraction
LLM Text Extraction
Base 64 Encoding
Vision Models
Embeddings
Multimodal Embeddings
Topic modeling
Vector databases
RAG with the CLI)
Hybrid RAG with TypeSense
Function Calling
LLM Agents
LLM Image Generation
LLM Speech
LLM Evals
Project 1
4. Data Sourcing
Scraping with Excel
Scraping with Google Sheets
Crawling with the CLI
BBC Weather API with Python
Scraping IMDb with JavaScript
Nominatim API with Python
Wikipedia Data with Python
Scraping PDFs with Tabula
Convert PDFs to Markdown
Convert HTML to Markdown
LLM Website Scraping
LLM Video Screen-Scraping
Web Automation with Playwright
Scheduled Scraping with GitHub Actions
Scraping emarketer.com
Scraping: Live Sessions
5. Data Preparation
Data Cleansing in Excel
Data Transformation in Excel
Splitting Text in Excel
Data Aggregation in Excel
Data Preparation in the Shell
Data Preparation in the Editor
Data Preparation in DuckDB
Cleaning Data with OpenRefine
Parsing JSON
Data Transformation with dbt
Transforming Images
Extracting Audio and Transcripts
6. Data Analysis
Correlation with Excel
Regression with Excel
Forecasting with Excel
Outlier Detection with Excel
Data Analysis with Python
Data Analysis with SQL
Data Analysis with Datasette
Data Analysis with DuckDB
Data Analysis with ChatGPT
Geospatial Analysis with Excel
Geospatial Analysis with Python
Geospatial Analysis with QGIS
Network Analysis in Python
Project 2
7. Data Visualization
Visualizing Forecasts with Excel
Visualizing Animated Data with PowerPoint
Visualizing Animated Data with Flourish
Visualizing Network Data with Kumu
Visualizing Charts with Excel
Data Visualization with Seaborn
Data Visualization with ChatGPT
Actor Network Visualization
RAWgraphs
Data Storytelling
Narratives with LLMs
Interactive Notebooks: Marimo
HTML Slides: RevealJS
Markdown Presentations: Marp
LLM Text Extraction
JSON
is one of the most widely used formats in the world for applications to exchange data.
This video explains how to use LLMs to extract structure from unstructured data, covering:
LLM for Data Extraction
: Use OpenAI’s API to extract structured information from unstructured data like addresses.
JSON Schema
: Define a JSON schema to ensure consistent and structured output from the LLM.
Prompt Engineering
: Craft effective prompts to guide the LLM’s response and improve accuracy.
Data Cleaning
: Use string functions and OpenAI’s API to clean and standardize data.
Data Analysis
: Analyze extracted data using Pandas to gain insights.
LLM Limitations
: Understand the limitations of LLMs, including potential errors and inconsistencies in output.
Production Use Cases
: Explore real-world applications of LLMs for data extraction, such as customer service email analysis.
Here are the links used in the video:
Jupyter Notebook
JSON Schema
Function calling
Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied
JSON Schema
, so you don’t need to worry about the model omitting a required key,
or hallucinating an invalid enum value.
curl
https://api.openai.com/v1/chat/completions
\
-H
"Authorization: Bearer
$OPENAI_API_KEY
"
\
-H
"Content-Type: application/json"
\
-d
'{
  "model": "gpt-4o-2024-08-06",
  "messages": [
    { "role": "system", "content": "You are a helpful math tutor. Guide the user through the solution step by step." },
    { "role": "user", "content": "how can I solve 8x + 7 = -23" }
  ],
  "response_format": {
    "type": "json_schema",
    "json_schema": {
      "name": "math_response",
      "strict": true
      "schema": {
        "type": "object",
        "properties": {
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "explanation": { "type": "string" }, "output": { "type": "string" } },
              "required": ["explanation", "output"],
              "additionalProperties": false
            }
          },
          "final_answer": { "type": "string" }
        },
        "required": ["steps", "final_answer"],
        "additionalProperties": false
      }
    }
  }
}'
Copy to clipboard
Error
Copied
Here’s what the
response_format
tells OpenAI. The items marked ⚠️ are OpenAI specific requirements for the JSON schema.
"type": "json_schema"
: We want you to generate a JSON response that follows this schema.
"json_schema":
: We’re going to give you a schema.
"name": "math_response"
: The schema is called
math_response
. (We can call it anything.)
"strict": true
: Follow the schema exactly.
"schema":
: Now, here’s the actual JSON schema.
"type": "object"
: Return an object. ⚠️ The root object
must
be an object.
"properties":
: The object has these properties:
"steps":
: There’s a
steps
property.
"type": "array"
: It’s an array.
"items":
: Each item in the array…
"type": "object"
: … is an object.
"properties":
: The object has these properties:
"explanation":
: There’s an
explanation
property.
"type": "string"
: … which is a string.
"output":
: There’s an
output
property.
"type": "string"
: … which is a string, too.
"required": ["explanation", "output"]
: ⚠️ You
must
add
"required": [...]
and include
all
fields int he object.
"additionalProperties": false
: ⚠️ OpenAI requires every object to have
"additionalProperties": false
.
"final_answer":
: There’s a
final_answer
property.
"type": "string"
: … which is a string.
"required": ["steps", "final_answer"]
: ⚠️ You
must
add
"required": [...]
and include
all
fields in the object.
"additionalProperties": false
: ⚠️ OpenAI requires every object to have
"additionalProperties": false
.
Previous
LLM Sentiment Analysis
Next
Base 64 Encoding