Tools in Data Science
Tools in Data Science
1. Development Tools
Editor: VS Code
AI Code Editors: GitHub Copilot
Python tools: uv
JavaScript tools: npx
Unicode
Browser: DevTools
CSS Selectors
JSON
Terminal: Bash
AI Terminal Tools: llm
Spreadsheet: Excel, Google Sheets
Database: SQLite
Version Control: Git, GitHub
2. Deployment Tools
Markdown
Images: Compression
Static hosting: GitHub Pages
Notebooks: Google Colab
Serverless hosting: Vercel
CI/CD: GitHub Actions
Containers: Docker, Podman
DevContainers: GitHub Codespaces
Tunneling: ngrok
CORS
REST APIs
REST APIs
Web Framework: FastAPI
Authentication: Google Auth
Local LLMs: Ollama
3. Large Language Models
Prompt engineering
TDS TA Instructions
TDS GPT Reviewer
LLM Sentiment Analysis
LLM Text Extraction
Base 64 Encoding
Vision Models
Embeddings
Multimodal Embeddings
Topic modeling
Vector databases
RAG with the CLI)
Hybrid RAG with TypeSense
Function Calling
LLM Agents
LLM Image Generation
LLM Speech
LLM Evals
Project 1
4. Data Sourcing
Scraping with Excel
Scraping with Google Sheets
Crawling with the CLI
BBC Weather API with Python
Scraping IMDb with JavaScript
Nominatim API with Python
Wikipedia Data with Python
Scraping PDFs with Tabula
Convert PDFs to Markdown
Convert HTML to Markdown
LLM Website Scraping
LLM Video Screen-Scraping
Web Automation with Playwright
Scheduled Scraping with GitHub Actions
Scraping emarketer.com
Scraping: Live Sessions
5. Data Preparation
Data Cleansing in Excel
Data Transformation in Excel
Splitting Text in Excel
Data Aggregation in Excel
Data Preparation in the Shell
Data Preparation in the Editor
Data Preparation in DuckDB
Cleaning Data with OpenRefine
Parsing JSON
Data Transformation with dbt
Transforming Images
Extracting Audio and Transcripts
6. Data Analysis
Correlation with Excel
Regression with Excel
Forecasting with Excel
Outlier Detection with Excel
Data Analysis with Python
Data Analysis with SQL
Data Analysis with Datasette
Data Analysis with DuckDB
Data Analysis with ChatGPT
Geospatial Analysis with Excel
Geospatial Analysis with Python
Geospatial Analysis with QGIS
Network Analysis in Python
Project 2
7. Data Visualization
Visualizing Forecasts with Excel
Visualizing Animated Data with PowerPoint
Visualizing Animated Data with Flourish
Visualizing Network Data with Kumu
Visualizing Charts with Excel
Data Visualization with Seaborn
Data Visualization with ChatGPT
Actor Network Visualization
RAWgraphs
Data Storytelling
Narratives with LLMs
Interactive Notebooks: Marimo
HTML Slides: RevealJS
Markdown Presentations: Marp
REST APIs
REST (Representational State Transfer) APIs are the standard way to build web services that allow different systems to communicate over HTTP. They use standard HTTP methods and JSON for data exchange.
Watch this comprehensive introduction to REST APIs (52 min):
Key Concepts:
HTTP Methods
GET
: Retrieve data
POST
: Create new data
PUT/PATCH
: Update existing data
DELETE
: Remove data
Status Codes
2xx
: Success (200 OK, 201 Created)
4xx
: Client errors (400 Bad Request, 404 Not Found)
5xx
: Server errors (500 Internal Server Error)
Hereâ€™s a minimal REST API using FastAPI. Run this
server.py
script via
uv run server.py
:
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "fastapi",
#     "uvicorn",
# ]
# ///
from
fastapi
import
FastAPI
,
HTTPException
from
typing
import
Dict
,
List

app
=
FastAPI
(
)
# Create a list of items that will act like a database
items
:
List
[
Dict
[
str
,
float
|
int
|
str
]
]
=
[
]
# Create a GET endpoint that returns all items
@app
.
get
(
"/items"
)
async
def
get_items
(
)
-
>
List
[
Dict
[
str
,
float
|
int
|
str
]
]
:
return
items
# Create a GET endpoint that returns a specific item by ID
@app
.
get
(
"/items/{item_id}"
)
async
def
get_item
(
item_id
:
int
)
-
>
Dict
[
str
,
float
|
int
|
str
]
:
if
item
:=
next
(
(
i
for
i
in
items
if
i
[
"id"
]
==
item_id
)
,
None
)
:
return
item
raise
HTTPException
(
status_code
=
404
,
detail
=
"Item not found"
)
# Create a POST endpoint that creates a new item
@app
.
post
(
"/items"
)
async
def
create_item
(
item
:
Dict
[
str
,
float
|
str
]
)
-
>
Dict
[
str
,
float
|
int
|
str
]
:
new_item
=
{
"id"
:
len
(
items
)
+
1
,
"name"
:
item
[
"name"
]
,
"price"
:
float
(
item
[
"price"
]
)
}
items
.
append
(
new_item
)
return
new_item
if
__name__
==
"__main__"
:
import
uvicorn
    uvicorn
.
run
(
app
,
host
=
"0.0.0.0"
,
port
=
8000
)
Copy to clipboard
Error
Copied
Test the API with curl:
# Get all items
curl
http://localhost:8000/items
# Create an item
curl
-X
POST http://localhost:8000/items
\
-H
"Content-Type: application/json"
\
-d
'{"name": "Book", "price": 29.99}'
# Get specific item
curl
http://localhost:8000/items/1
Copy to clipboard
Error
Copied
Best Practices:
Use Nouns for Resources
Good:
/users
,
/posts
Bad:
/getUsers
,
/createPost
Version Your API
/api/v1/users
/api/v2/users
Copy to clipboard
Error
Copied
Handle Errors Consistently
{
"error"
:
"Not Found"
,
"message"
:
"User 123 not found"
,
"status_code"
:
404
}
Copy to clipboard
Error
Copied
Use Query Parameters for Filtering
/api/posts?status=published&category=tech
Copy to clipboard
Error
Copied
Implement Pagination
/api/posts?page=2&limit=10
Copy to clipboard
Error
Copied
Tools:
Postman
: API testing and documentation
Swagger/OpenAPI
: API documentation
HTTPie
: Modern command-line HTTP client
JSON Schema
: API request/response validation
Learn more about REST APIs:
REST API Design Best Practices
Microsoft REST API Guidelines
Google API Design Guide
Previous
CORS
Next
Web Framework: FastAPI